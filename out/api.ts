/**
 * ORY Hydra - Cloud Native OAuth 2.0 and OpenID Connect Server
 * Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here. Keep in mind that this document reflects the latest branch, always. Support for versioned documentation is coming in the future.
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');
import Promise = require('bluebird');

let defaultBasePath = 'http://localhost';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */
let primitives = [
                    "string",
                    "boolean",
                    "double",
                    "integer",
                    "long",
                    "float",
                    "number",
                    "any"
                 ];

class ObjectSerializer {

    public static findCorrectType(data: any, expectedType: string) {
        if (data == undefined) {
            return expectedType;
        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        } else if (expectedType === "Date") {
            return expectedType;
        } else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }

            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }

            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            } else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty]; // use the type given in the discriminator
                } else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }

    public static serialize(data: any, type: string) {
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return data.toString();
        } else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }

            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance: {[index: string]: any} = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }

    public static deserialize(data: any, type: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return new Date(data);
        } else {
            if (enumsMap[type]) {// is Enum
                return data;
            }

            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}

export class AcceptConsentRequest {
    /**
    * GrantScope sets the scope the user authorized the client to use. Should be a subset of `requested_scope`
    */
    'grantScope'?: Array<string>;
    /**
    * Remember, if set to true, tells ORY Hydra to remember this consent authorization and reuse it if the same client asks the same user for the same, or a subset of, scope.
    */
    'remember'?: boolean;
    /**
    * RememberFor sets how long the consent authorization should be remembered for in seconds. If set to `0`, the authorization will be remembered indefinitely.
    */
    'rememberFor'?: number;
    'session'?: ConsentRequestSession;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "grantScope",
            "baseName": "grant_scope",
            "type": "Array<string>"
        },
        {
            "name": "remember",
            "baseName": "remember",
            "type": "boolean"
        },
        {
            "name": "rememberFor",
            "baseName": "remember_for",
            "type": "number"
        },
        {
            "name": "session",
            "baseName": "session",
            "type": "ConsentRequestSession"
        }    ];

    static getAttributeTypeMap() {
        return AcceptConsentRequest.attributeTypeMap;
    }
}

export class AcceptLoginRequest {
    /**
    * ACR sets the Authentication AuthorizationContext Class Reference value for this authentication session. You can use it to express that, for example, a user authenticated using two factor authentication.
    */
    'acr'?: string;
    /**
    * ForceSubjectIdentifier forces the \"pairwise\" user ID of the end-user that authenticated. The \"pairwise\" user ID refers to the (Pairwise Identifier Algorithm)[http://openid.net/specs/openid-connect-core-1_0.html#PairwiseAlg] of the OpenID Connect specification. It allows you to set an obfuscated subject (\"user\") identifier that is unique to the client.  Please note that this changes the user ID on endpoint /userinfo and sub claim of the ID Token. It does not change the sub claim in the OAuth 2.0 Introspection.  Per default, ORY Hydra handles this value with its own algorithm. In case you want to set this yourself you can use this field. Please note that setting this field has no effect if `pairwise` is not configured in ORY Hydra or the OAuth 2.0 Client does not expect a pairwise identifier (set via `subject_type` key in the client's configuration).  Please also be aware that ORY Hydra is unable to properly compute this value during authentication. This implies that you have to compute this value on every authentication process (probably depending on the client ID or some other unique value).  If you fail to compute the proper value, then authentication processes which have id_token_hint set might fail.
    */
    'forceSubjectIdentifier'?: string;
    /**
    * Remember, if set to true, tells ORY Hydra to remember this user by telling the user agent (browser) to store a cookie with authentication data. If the same user performs another OAuth 2.0 Authorization Request, he/she will not be asked to log in again.
    */
    'remember'?: boolean;
    /**
    * RememberFor sets how long the authentication should be remembered for in seconds. If set to `0`, the authorization will be remembered indefinitely.
    */
    'rememberFor'?: number;
    /**
    * Subject is the user ID of the end-user that authenticated.
    */
    'subject'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "acr",
            "baseName": "acr",
            "type": "string"
        },
        {
            "name": "forceSubjectIdentifier",
            "baseName": "force_subject_identifier",
            "type": "string"
        },
        {
            "name": "remember",
            "baseName": "remember",
            "type": "boolean"
        },
        {
            "name": "rememberFor",
            "baseName": "remember_for",
            "type": "number"
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return AcceptLoginRequest.attributeTypeMap;
    }
}

/**
* AttributeTypeAndValue mirrors the ASN.1 structure of the same name in http://tools.ietf.org/html/rfc5280#section-4.1.2.4
*/
export class AttributeTypeAndValue {
    'type'?: ObjectIdentifier;
    'value'?: any;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "Type",
            "type": "ObjectIdentifier"
        },
        {
            "name": "value",
            "baseName": "Value",
            "type": "any"
        }    ];

    static getAttributeTypeMap() {
        return AttributeTypeAndValue.attributeTypeMap;
    }
}

export class AuthenticationSession {
    'authenticatedAt'?: Date;
    'ID'?: string;
    'subject'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "authenticatedAt",
            "baseName": "AuthenticatedAt",
            "type": "Date"
        },
        {
            "name": "ID",
            "baseName": "ID",
            "type": "string"
        },
        {
            "name": "subject",
            "baseName": "Subject",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return AuthenticationSession.attributeTypeMap;
    }
}

export class Certificate {
    'authorityKeyId'?: Array<number>;
    /**
    * BasicConstraintsValid indicates whether IsCA, MaxPathLen, and MaxPathLenZero are valid.
    */
    'basicConstraintsValid'?: boolean;
    /**
    * CRL Distribution Points
    */
    'cRLDistributionPoints'?: Array<string>;
    /**
    * Subject Alternate Name values. (Note that these values may not be valid if invalid values were contained within a parsed certificate. For example, an element of DNSNames may not be a valid DNS domain name.)
    */
    'dNSNames'?: Array<string>;
    'emailAddresses'?: Array<string>;
    'excludedDNSDomains'?: Array<string>;
    'excludedEmailAddresses'?: Array<string>;
    'excludedIPRanges'?: Array<IPNet>;
    'excludedURIDomains'?: Array<string>;
    'extKeyUsage'?: Array<ExtKeyUsage>;
    /**
    * Extensions contains raw X.509 extensions. When parsing certificates, this can be used to extract non-critical extensions that are not parsed by this package. When marshaling certificates, the Extensions field is ignored, see ExtraExtensions.
    */
    'extensions'?: Array<Extension>;
    /**
    * ExtraExtensions contains extensions to be copied, raw, into any marshaled certificates. Values override any extensions that would otherwise be produced based on the other fields. The ExtraExtensions field is not populated when parsing certificates, see Extensions.
    */
    'extraExtensions'?: Array<Extension>;
    'iPAddresses'?: Array<IP>;
    'isCA'?: boolean;
    'issuer'?: Name;
    'issuingCertificateURL'?: Array<string>;
    'keyUsage'?: KeyUsage;
    /**
    * MaxPathLen and MaxPathLenZero indicate the presence and value of the BasicConstraints' \"pathLenConstraint\".  When parsing a certificate, a positive non-zero MaxPathLen means that the field was specified, -1 means it was unset, and MaxPathLenZero being true mean that the field was explicitly set to zero. The case of MaxPathLen==0 with MaxPathLenZero==false should be treated equivalent to -1 (unset).  When generating a certificate, an unset pathLenConstraint can be requested with either MaxPathLen == -1 or using the zero value for both MaxPathLen and MaxPathLenZero.
    */
    'maxPathLen'?: number;
    /**
    * MaxPathLenZero indicates that BasicConstraintsValid==true and MaxPathLen==0 should be interpreted as an actual maximum path length of zero. Otherwise, that combination is interpreted as MaxPathLen not being set.
    */
    'maxPathLenZero'?: boolean;
    'notBefore'?: Date;
    /**
    * RFC 5280, 4.2.2.1 (Authority Information Access)
    */
    'oCSPServer'?: Array<string>;
    'permittedDNSDomains'?: Array<string>;
    /**
    * Name constraints
    */
    'permittedDNSDomainsCritical'?: boolean;
    'permittedEmailAddresses'?: Array<string>;
    'permittedIPRanges'?: Array<IPNet>;
    'permittedURIDomains'?: Array<string>;
    'policyIdentifiers'?: Array<ObjectIdentifier>;
    'publicKey'?: any;
    'publicKeyAlgorithm'?: PublicKeyAlgorithm;
    'raw'?: Array<number>;
    'rawIssuer'?: Array<number>;
    'rawSubject'?: Array<number>;
    'rawSubjectPublicKeyInfo'?: Array<number>;
    'rawTBSCertificate'?: Array<number>;
    'serialNumber'?: ModelInt;
    'signature'?: Array<number>;
    'signatureAlgorithm'?: SignatureAlgorithm;
    'subject'?: Name;
    'subjectKeyId'?: Array<number>;
    'uRIs'?: Array<URL>;
    /**
    * UnhandledCriticalExtensions contains a list of extension IDs that were not (fully) processed when parsing. Verify will fail if this slice is non-empty, unless verification is delegated to an OS library which understands all the critical extensions.  Users can access these extensions using Extensions and can remove elements from this slice if they believe that they have been handled.
    */
    'unhandledCriticalExtensions'?: Array<ObjectIdentifier>;
    'unknownExtKeyUsage'?: Array<ObjectIdentifier>;
    'version'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "authorityKeyId",
            "baseName": "AuthorityKeyId",
            "type": "Array<number>"
        },
        {
            "name": "basicConstraintsValid",
            "baseName": "BasicConstraintsValid",
            "type": "boolean"
        },
        {
            "name": "cRLDistributionPoints",
            "baseName": "CRLDistributionPoints",
            "type": "Array<string>"
        },
        {
            "name": "dNSNames",
            "baseName": "DNSNames",
            "type": "Array<string>"
        },
        {
            "name": "emailAddresses",
            "baseName": "EmailAddresses",
            "type": "Array<string>"
        },
        {
            "name": "excludedDNSDomains",
            "baseName": "ExcludedDNSDomains",
            "type": "Array<string>"
        },
        {
            "name": "excludedEmailAddresses",
            "baseName": "ExcludedEmailAddresses",
            "type": "Array<string>"
        },
        {
            "name": "excludedIPRanges",
            "baseName": "ExcludedIPRanges",
            "type": "Array<IPNet>"
        },
        {
            "name": "excludedURIDomains",
            "baseName": "ExcludedURIDomains",
            "type": "Array<string>"
        },
        {
            "name": "extKeyUsage",
            "baseName": "ExtKeyUsage",
            "type": "Array<ExtKeyUsage>"
        },
        {
            "name": "extensions",
            "baseName": "Extensions",
            "type": "Array<Extension>"
        },
        {
            "name": "extraExtensions",
            "baseName": "ExtraExtensions",
            "type": "Array<Extension>"
        },
        {
            "name": "iPAddresses",
            "baseName": "IPAddresses",
            "type": "Array<IP>"
        },
        {
            "name": "isCA",
            "baseName": "IsCA",
            "type": "boolean"
        },
        {
            "name": "issuer",
            "baseName": "Issuer",
            "type": "Name"
        },
        {
            "name": "issuingCertificateURL",
            "baseName": "IssuingCertificateURL",
            "type": "Array<string>"
        },
        {
            "name": "keyUsage",
            "baseName": "KeyUsage",
            "type": "KeyUsage"
        },
        {
            "name": "maxPathLen",
            "baseName": "MaxPathLen",
            "type": "number"
        },
        {
            "name": "maxPathLenZero",
            "baseName": "MaxPathLenZero",
            "type": "boolean"
        },
        {
            "name": "notBefore",
            "baseName": "NotBefore",
            "type": "Date"
        },
        {
            "name": "oCSPServer",
            "baseName": "OCSPServer",
            "type": "Array<string>"
        },
        {
            "name": "permittedDNSDomains",
            "baseName": "PermittedDNSDomains",
            "type": "Array<string>"
        },
        {
            "name": "permittedDNSDomainsCritical",
            "baseName": "PermittedDNSDomainsCritical",
            "type": "boolean"
        },
        {
            "name": "permittedEmailAddresses",
            "baseName": "PermittedEmailAddresses",
            "type": "Array<string>"
        },
        {
            "name": "permittedIPRanges",
            "baseName": "PermittedIPRanges",
            "type": "Array<IPNet>"
        },
        {
            "name": "permittedURIDomains",
            "baseName": "PermittedURIDomains",
            "type": "Array<string>"
        },
        {
            "name": "policyIdentifiers",
            "baseName": "PolicyIdentifiers",
            "type": "Array<ObjectIdentifier>"
        },
        {
            "name": "publicKey",
            "baseName": "PublicKey",
            "type": "any"
        },
        {
            "name": "publicKeyAlgorithm",
            "baseName": "PublicKeyAlgorithm",
            "type": "PublicKeyAlgorithm"
        },
        {
            "name": "raw",
            "baseName": "Raw",
            "type": "Array<number>"
        },
        {
            "name": "rawIssuer",
            "baseName": "RawIssuer",
            "type": "Array<number>"
        },
        {
            "name": "rawSubject",
            "baseName": "RawSubject",
            "type": "Array<number>"
        },
        {
            "name": "rawSubjectPublicKeyInfo",
            "baseName": "RawSubjectPublicKeyInfo",
            "type": "Array<number>"
        },
        {
            "name": "rawTBSCertificate",
            "baseName": "RawTBSCertificate",
            "type": "Array<number>"
        },
        {
            "name": "serialNumber",
            "baseName": "SerialNumber",
            "type": "ModelInt"
        },
        {
            "name": "signature",
            "baseName": "Signature",
            "type": "Array<number>"
        },
        {
            "name": "signatureAlgorithm",
            "baseName": "SignatureAlgorithm",
            "type": "SignatureAlgorithm"
        },
        {
            "name": "subject",
            "baseName": "Subject",
            "type": "Name"
        },
        {
            "name": "subjectKeyId",
            "baseName": "SubjectKeyId",
            "type": "Array<number>"
        },
        {
            "name": "uRIs",
            "baseName": "URIs",
            "type": "Array<URL>"
        },
        {
            "name": "unhandledCriticalExtensions",
            "baseName": "UnhandledCriticalExtensions",
            "type": "Array<ObjectIdentifier>"
        },
        {
            "name": "unknownExtKeyUsage",
            "baseName": "UnknownExtKeyUsage",
            "type": "Array<ObjectIdentifier>"
        },
        {
            "name": "version",
            "baseName": "Version",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return Certificate.attributeTypeMap;
    }
}

export class CompletedRequest {
    /**
    * RedirectURL is the URL which you should redirect the user to once the authentication process is completed.
    */
    'redirectTo'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "redirectTo",
            "baseName": "redirect_to",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return CompletedRequest.attributeTypeMap;
    }
}

export class ConsentRequest {
    /**
    * Challenge is the identifier (\"authorization challenge\") of the consent authorization request. It is used to identify the session.
    */
    'challenge'?: string;
    'client'?: OAuth2Client;
    'oidcContext'?: OpenIDConnectContext;
    /**
    * RequestURL is the original OAuth 2.0 Authorization URL requested by the OAuth 2.0 client. It is the URL which initiates the OAuth 2.0 Authorization Code or OAuth 2.0 Implicit flow. This URL is typically not needed, but might come in handy if you want to deal with additional request parameters.
    */
    'requestUrl'?: string;
    /**
    * RequestedScope contains all scopes requested by the OAuth 2.0 client.
    */
    'requestedScope'?: Array<string>;
    /**
    * Skip, if true, implies that the client has requested the same scopes from the same user previously. If true, you must not ask the user to grant the requested scopes. You must however either allow or deny the consent request using the usual API call.
    */
    'skip'?: boolean;
    /**
    * Subject is the user ID of the end-user that authenticated. Now, that end user needs to grant or deny the scope requested by the OAuth 2.0 client.
    */
    'subject'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "challenge",
            "baseName": "challenge",
            "type": "string"
        },
        {
            "name": "client",
            "baseName": "client",
            "type": "OAuth2Client"
        },
        {
            "name": "oidcContext",
            "baseName": "oidc_context",
            "type": "OpenIDConnectContext"
        },
        {
            "name": "requestUrl",
            "baseName": "request_url",
            "type": "string"
        },
        {
            "name": "requestedScope",
            "baseName": "requested_scope",
            "type": "Array<string>"
        },
        {
            "name": "skip",
            "baseName": "skip",
            "type": "boolean"
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ConsentRequest.attributeTypeMap;
    }
}

export class ConsentRequestSession {
    /**
    * AccessToken sets session data for the access and refresh token, as well as any future tokens issued by the refresh grant. Keep in mind that this data will be available to anyone performing OAuth 2.0 Challenge Introspection. If only your services can perform OAuth 2.0 Challenge Introspection, this is usually fine. But if third parties can access that endpoint as well, sensitive data from the session might be exposed to them. Use with care!
    */
    'accessToken'?: { [key: string]: any; };
    /**
    * IDToken sets session data for the OpenID Connect ID token. Keep in mind that the session'id payloads are readable by anyone that has access to the ID Challenge. Use with care!
    */
    'idToken'?: { [key: string]: any; };

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "accessToken",
            "baseName": "access_token",
            "type": "{ [key: string]: any; }"
        },
        {
            "name": "idToken",
            "baseName": "id_token",
            "type": "{ [key: string]: any; }"
        }    ];

    static getAttributeTypeMap() {
        return ConsentRequestSession.attributeTypeMap;
    }
}

/**
* Each of the ExtKeyUsage* constants define a unique action.
*/
export class ExtKeyUsage {

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return ExtKeyUsage.attributeTypeMap;
    }
}

/**
* Extension represents the ASN.1 structure of the same name. See RFC 5280, section 4.2.
*/
export class Extension {
    'critical'?: boolean;
    'id'?: ObjectIdentifier;
    'value'?: Array<number>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "critical",
            "baseName": "Critical",
            "type": "boolean"
        },
        {
            "name": "id",
            "baseName": "Id",
            "type": "ObjectIdentifier"
        },
        {
            "name": "value",
            "baseName": "Value",
            "type": "Array<number>"
        }    ];

    static getAttributeTypeMap() {
        return Extension.attributeTypeMap;
    }
}

export class FlushInactiveOAuth2TokensRequest {
    /**
    * NotAfter sets after which point tokens should not be flushed. This is useful when you want to keep a history of recently issued tokens for auditing.
    */
    'notAfter'?: Date;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "notAfter",
            "baseName": "notAfter",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return FlushInactiveOAuth2TokensRequest.attributeTypeMap;
    }
}

export class HealthNotReadyStatus {
    /**
    * Errors contains a list of errors that caused the not ready status.
    */
    'errors'?: { [key: string]: string; };

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "errors",
            "baseName": "errors",
            "type": "{ [key: string]: string; }"
        }    ];

    static getAttributeTypeMap() {
        return HealthNotReadyStatus.attributeTypeMap;
    }
}

export class HealthStatus {
    /**
    * Status always contains \"ok\".
    */
    'status'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return HealthStatus.attributeTypeMap;
    }
}

/**
* Note that in this documentation, referring to an IP address as an IPv4 address or an IPv6 address is a semantic property of the address, not just the length of the byte slice: a 16-byte slice can still be an IPv4 address.
*/
export class IP extends Array<number> {

    static discriminator = undefined;

}

export class IPMask extends Array<number> {

    static discriminator = undefined;

}

export class IPNet {
    'IP'?: IP;
    'mask'?: IPMask;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "IP",
            "baseName": "IP",
            "type": "IP"
        },
        {
            "name": "mask",
            "baseName": "Mask",
            "type": "IPMask"
        }    ];

    static getAttributeTypeMap() {
        return IPNet.attributeTypeMap;
    }
}

export class InlineResponse401 {
    'error'?: string;
    'errorCode'?: number;
    'errorDebug'?: number;
    'errorHint'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "error",
            "baseName": "error",
            "type": "string"
        },
        {
            "name": "errorCode",
            "baseName": "error_code",
            "type": "number"
        },
        {
            "name": "errorDebug",
            "baseName": "error_debug",
            "type": "number"
        },
        {
            "name": "errorHint",
            "baseName": "error_hint",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return InlineResponse401.attributeTypeMap;
    }
}

export class JSONWebKey {
    'algorithm'?: string;
    'certificates'?: Array<Certificate>;
    'key'?: any;
    'keyID'?: string;
    'use'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "algorithm",
            "baseName": "Algorithm",
            "type": "string"
        },
        {
            "name": "certificates",
            "baseName": "Certificates",
            "type": "Array<Certificate>"
        },
        {
            "name": "key",
            "baseName": "Key",
            "type": "any"
        },
        {
            "name": "keyID",
            "baseName": "KeyID",
            "type": "string"
        },
        {
            "name": "use",
            "baseName": "Use",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return JSONWebKey.attributeTypeMap;
    }
}

export class JSONWebKeySet {
    'keys'?: Array<JSONWebKey>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "keys",
            "baseName": "keys",
            "type": "Array<JSONWebKey>"
        }    ];

    static getAttributeTypeMap() {
        return JSONWebKeySet.attributeTypeMap;
    }
}

export class JoseWebKeySetRequest {
    'keys'?: Array<RawMessage>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "keys",
            "baseName": "keys",
            "type": "Array<RawMessage>"
        }    ];

    static getAttributeTypeMap() {
        return JoseWebKeySetRequest.attributeTypeMap;
    }
}

export class JsonWebKey {
    /**
    * The \"alg\" (algorithm) parameter identifies the algorithm intended for use with the key.  The values used should either be registered in the IANA \"JSON Web Signature and Encryption Algorithms\" registry established by [JWA] or be a value that contains a Collision- Resistant Name.
    */
    'alg'?: string;
    'crv'?: string;
    'd'?: string;
    'dp'?: string;
    'dq'?: string;
    'e'?: string;
    'k'?: string;
    /**
    * The \"kid\" (key ID) parameter is used to match a specific key.  This is used, for instance, to choose among a set of keys within a JWK Set during key rollover.  The structure of the \"kid\" value is unspecified.  When \"kid\" values are used within a JWK Set, different keys within the JWK Set SHOULD use distinct \"kid\" values.  (One example in which different keys might use the same \"kid\" value is if they have different \"kty\" (key type) values but are considered to be equivalent alternatives by the application using them.)  The \"kid\" value is a case-sensitive string.
    */
    'kid'?: string;
    /**
    * The \"kty\" (key type) parameter identifies the cryptographic algorithm family used with the key, such as \"RSA\" or \"EC\". \"kty\" values should either be registered in the IANA \"JSON Web Key Types\" registry established by [JWA] or be a value that contains a Collision- Resistant Name.  The \"kty\" value is a case-sensitive string.
    */
    'kty'?: string;
    'n'?: string;
    'p'?: string;
    'q'?: string;
    'qi'?: string;
    /**
    * The \"use\" (public key use) parameter identifies the intended use of the public key. The \"use\" parameter is employed to indicate whether a public key is used for encrypting data or verifying the signature on data. Values are commonly \"sig\" (signature) or \"enc\" (encryption).
    */
    'use'?: string;
    'x'?: string;
    /**
    * The \"x5c\" (X.509 certificate chain) parameter contains a chain of one or more PKIX certificates [RFC5280].  The certificate chain is represented as a JSON array of certificate value strings.  Each string in the array is a base64-encoded (Section 4 of [RFC4648] -- not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value. The PKIX certificate containing the key value MUST be the first certificate.
    */
    'x5c'?: Array<string>;
    'y'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "alg",
            "baseName": "alg",
            "type": "string"
        },
        {
            "name": "crv",
            "baseName": "crv",
            "type": "string"
        },
        {
            "name": "d",
            "baseName": "d",
            "type": "string"
        },
        {
            "name": "dp",
            "baseName": "dp",
            "type": "string"
        },
        {
            "name": "dq",
            "baseName": "dq",
            "type": "string"
        },
        {
            "name": "e",
            "baseName": "e",
            "type": "string"
        },
        {
            "name": "k",
            "baseName": "k",
            "type": "string"
        },
        {
            "name": "kid",
            "baseName": "kid",
            "type": "string"
        },
        {
            "name": "kty",
            "baseName": "kty",
            "type": "string"
        },
        {
            "name": "n",
            "baseName": "n",
            "type": "string"
        },
        {
            "name": "p",
            "baseName": "p",
            "type": "string"
        },
        {
            "name": "q",
            "baseName": "q",
            "type": "string"
        },
        {
            "name": "qi",
            "baseName": "qi",
            "type": "string"
        },
        {
            "name": "use",
            "baseName": "use",
            "type": "string"
        },
        {
            "name": "x",
            "baseName": "x",
            "type": "string"
        },
        {
            "name": "x5c",
            "baseName": "x5c",
            "type": "Array<string>"
        },
        {
            "name": "y",
            "baseName": "y",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return JsonWebKey.attributeTypeMap;
    }
}

export class JsonWebKeySet {
    /**
    * The value of the \"keys\" parameter is an array of JWK values.  By default, the order of the JWK values within the array does not imply an order of preference among them, although applications of JWK Sets can choose to assign a meaning to the order for their purposes, if desired.
    */
    'keys'?: Array<JsonWebKey>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "keys",
            "baseName": "keys",
            "type": "Array<JsonWebKey>"
        }    ];

    static getAttributeTypeMap() {
        return JsonWebKeySet.attributeTypeMap;
    }
}

export class JsonWebKeySetGeneratorRequest {
    /**
    * The algorithm to be used for creating the key. Supports \"RS256\", \"ES512\", \"HS512\", and \"HS256\"
    */
    'alg': string;
    /**
    * The kid of the key to be created
    */
    'kid': string;
    /**
    * The \"use\" (public key use) parameter identifies the intended use of the public key. The \"use\" parameter is employed to indicate whether a public key is used for encrypting data or verifying the signature on data. Valid values are \"enc\" and \"sig\".
    */
    'use': string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "alg",
            "baseName": "alg",
            "type": "string"
        },
        {
            "name": "kid",
            "baseName": "kid",
            "type": "string"
        },
        {
            "name": "use",
            "baseName": "use",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return JsonWebKeySetGeneratorRequest.attributeTypeMap;
    }
}

/**
* KeyUsage represents the set of actions that are valid for a given key. It's a bitmap of the KeyUsage* constants.
*/
export class KeyUsage {

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return KeyUsage.attributeTypeMap;
    }
}

export class LoginRequest {
    /**
    * Challenge is the identifier (\"authentication challenge\") of the consent authentication request. It is used to identify the session.
    */
    'challenge'?: string;
    'client'?: OAuth2Client;
    'oidcContext'?: OpenIDConnectContext;
    /**
    * RequestURL is the original OAuth 2.0 Authorization URL requested by the OAuth 2.0 client. It is the URL which initiates the OAuth 2.0 Authorization Code or OAuth 2.0 Implicit flow. This URL is typically not needed, but might come in handy if you want to deal with additional request parameters.
    */
    'requestUrl'?: string;
    /**
    * RequestedScope contains all scopes requested by the OAuth 2.0 client.
    */
    'requestedScope'?: Array<string>;
    /**
    * Skip, if true, implies that the client has requested the same scopes from the same user previously. If true, you can skip asking the user to grant the requested scopes, and simply forward the user to the redirect URL.  This feature allows you to update / set session information.
    */
    'skip'?: boolean;
    /**
    * Subject is the user ID of the end-user that authenticated. Now, that end user needs to grant or deny the scope requested by the OAuth 2.0 client. If this value is set and `skip` is true, you MUST include this subject type when accepting the login request, or the request will fail.
    */
    'subject'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "challenge",
            "baseName": "challenge",
            "type": "string"
        },
        {
            "name": "client",
            "baseName": "client",
            "type": "OAuth2Client"
        },
        {
            "name": "oidcContext",
            "baseName": "oidc_context",
            "type": "OpenIDConnectContext"
        },
        {
            "name": "requestUrl",
            "baseName": "request_url",
            "type": "string"
        },
        {
            "name": "requestedScope",
            "baseName": "requested_scope",
            "type": "Array<string>"
        },
        {
            "name": "skip",
            "baseName": "skip",
            "type": "boolean"
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return LoginRequest.attributeTypeMap;
    }
}

/**
* The zero value for an Int represents the value 0.
*/
export class ModelInt {

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return ModelInt.attributeTypeMap;
    }
}

/**
* Name represents an X.509 distinguished name. This only includes the common elements of a DN. When parsing, all elements are stored in Names and non-standard elements can be extracted from there. When marshaling, elements in ExtraNames are appended and override other values with the same OID.
*/
export class Name {
    'country'?: Array<string>;
    'extraNames'?: Array<AttributeTypeAndValue>;
    'locality'?: Array<string>;
    'names'?: Array<AttributeTypeAndValue>;
    'serialNumber'?: string;
    'streetAddress'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "country",
            "baseName": "Country",
            "type": "Array<string>"
        },
        {
            "name": "extraNames",
            "baseName": "ExtraNames",
            "type": "Array<AttributeTypeAndValue>"
        },
        {
            "name": "locality",
            "baseName": "Locality",
            "type": "Array<string>"
        },
        {
            "name": "names",
            "baseName": "Names",
            "type": "Array<AttributeTypeAndValue>"
        },
        {
            "name": "serialNumber",
            "baseName": "SerialNumber",
            "type": "string"
        },
        {
            "name": "streetAddress",
            "baseName": "StreetAddress",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return Name.attributeTypeMap;
    }
}

export class OAuth2Client {
    /**
    * ClientID  is the id for this client.
    */
    'clientId'?: string;
    /**
    * Name is the human-readable string name of the client to be presented to the end-user during authorization.
    */
    'clientName'?: string;
    /**
    * Secret is the client's secret. The secret will be included in the create request as cleartext, and then never again. The secret is stored using BCrypt so it is impossible to recover it. Tell your users that they need to write the secret down as it will not be made available again.
    */
    'clientSecret'?: string;
    /**
    * SecretExpiresAt is an integer holding the time at which the client secret will expire or 0 if it will not expire. The time is represented as the number of seconds from 1970-01-01T00:00:00Z as measured in UTC until the date/time of expiration.
    */
    'clientSecretExpiresAt'?: number;
    /**
    * ClientURI is an URL string of a web page providing information about the client. If present, the server SHOULD display this URL to the end-user in a clickable fashion.
    */
    'clientUri'?: string;
    /**
    * Contacts is a array of strings representing ways to contact people responsible for this client, typically email addresses.
    */
    'contacts'?: Array<string>;
    /**
    * GrantTypes is an array of grant types the client is allowed to use.
    */
    'grantTypes'?: Array<string>;
    'jwks'?: JSONWebKeySet;
    /**
    * URL for the Client's JSON Web Key Set [JWK] document. If the Client signs requests to the Server, it contains the signing key(s) the Server uses to validate signatures from the Client. The JWK Set MAY also contain the Client's encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
    */
    'jwksUri'?: string;
    /**
    * LogoURI is an URL string that references a logo for the client.
    */
    'logoUri'?: string;
    /**
    * Owner is a string identifying the owner of the OAuth 2.0 Client.
    */
    'owner'?: string;
    /**
    * PolicyURI is a URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data.
    */
    'policyUri'?: string;
    /**
    * RedirectURIs is an array of allowed redirect urls for the client, for example http://mydomain/oauth/callback .
    */
    'redirectUris'?: Array<string>;
    /**
    * JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects from this Client MUST be rejected, if not signed with this algorithm.
    */
    'requestObjectSigningAlg'?: string;
    /**
    * Array of request_uri values that are pre-registered by the RP for use at the OP. Servers MAY cache the contents of the files referenced by these URIs and not retrieve them at the time they are used in a request. OPs can require that request_uri values used be pre-registered with the require_request_uri_registration discovery parameter.
    */
    'requestUris'?: Array<string>;
    /**
    * ResponseTypes is an array of the OAuth 2.0 response type strings that the client can use at the authorization endpoint.
    */
    'responseTypes'?: Array<string>;
    /**
    * Scope is a string containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens.
    */
    'scope'?: string;
    /**
    * URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a file with a single JSON array of redirect_uri values.
    */
    'sectorIdentifierUri'?: string;
    /**
    * SubjectType requested for responses to this Client. The subject_types_supported Discovery parameter contains a list of the supported subject_type values for this server. Valid types include `pairwise` and `public`.
    */
    'subjectType'?: string;
    /**
    * Requested Client Authentication method for the Token Endpoint. The options are client_secret_post, client_secret_basic, private_key_jwt, and none.
    */
    'tokenEndpointAuthMethod'?: string;
    /**
    * TermsOfServiceURI is a URL string that points to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client.
    */
    'tosUri'?: string;
    /**
    * JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT [JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type.
    */
    'userinfoSignedResponseAlg'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "clientId",
            "baseName": "client_id",
            "type": "string"
        },
        {
            "name": "clientName",
            "baseName": "client_name",
            "type": "string"
        },
        {
            "name": "clientSecret",
            "baseName": "client_secret",
            "type": "string"
        },
        {
            "name": "clientSecretExpiresAt",
            "baseName": "client_secret_expires_at",
            "type": "number"
        },
        {
            "name": "clientUri",
            "baseName": "client_uri",
            "type": "string"
        },
        {
            "name": "contacts",
            "baseName": "contacts",
            "type": "Array<string>"
        },
        {
            "name": "grantTypes",
            "baseName": "grant_types",
            "type": "Array<string>"
        },
        {
            "name": "jwks",
            "baseName": "jwks",
            "type": "JSONWebKeySet"
        },
        {
            "name": "jwksUri",
            "baseName": "jwks_uri",
            "type": "string"
        },
        {
            "name": "logoUri",
            "baseName": "logo_uri",
            "type": "string"
        },
        {
            "name": "owner",
            "baseName": "owner",
            "type": "string"
        },
        {
            "name": "policyUri",
            "baseName": "policy_uri",
            "type": "string"
        },
        {
            "name": "redirectUris",
            "baseName": "redirect_uris",
            "type": "Array<string>"
        },
        {
            "name": "requestObjectSigningAlg",
            "baseName": "request_object_signing_alg",
            "type": "string"
        },
        {
            "name": "requestUris",
            "baseName": "request_uris",
            "type": "Array<string>"
        },
        {
            "name": "responseTypes",
            "baseName": "response_types",
            "type": "Array<string>"
        },
        {
            "name": "scope",
            "baseName": "scope",
            "type": "string"
        },
        {
            "name": "sectorIdentifierUri",
            "baseName": "sector_identifier_uri",
            "type": "string"
        },
        {
            "name": "subjectType",
            "baseName": "subject_type",
            "type": "string"
        },
        {
            "name": "tokenEndpointAuthMethod",
            "baseName": "token_endpoint_auth_method",
            "type": "string"
        },
        {
            "name": "tosUri",
            "baseName": "tos_uri",
            "type": "string"
        },
        {
            "name": "userinfoSignedResponseAlg",
            "baseName": "userinfo_signed_response_alg",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return OAuth2Client.attributeTypeMap;
    }
}

/**
* https://tools.ietf.org/html/rfc7662
*/
export class OAuth2TokenIntrospection {
    /**
    * Active is a boolean indicator of whether or not the presented token is currently active.  The specifics of a token's \"active\" state will vary depending on the implementation of the authorization server and the information it keeps about its tokens, but a \"true\" value return for the \"active\" property will generally indicate that a given token has been issued by this authorization server, has not been revoked by the resource owner, and is within its given time window of validity (e.g., after its issuance time and before its expiration time).
    */
    'active': boolean;
    'aud'?: Array<string>;
    /**
    * ClientID is aclient identifier for the OAuth 2.0 client that requested this token.
    */
    'clientId'?: string;
    /**
    * Expires at is an integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token will expire.
    */
    'exp'?: number;
    /**
    * Extra is arbitrary data set by the session.
    */
    'ext'?: { [key: string]: any; };
    /**
    * Issued at is an integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token was originally issued.
    */
    'iat'?: number;
    /**
    * IssuerURL is a string representing the issuer of this token
    */
    'iss'?: string;
    /**
    * NotBefore is an integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token is not to be used before.
    */
    'nbf'?: number;
    /**
    * ObfuscatedSubject is set when the subject identifier algorithm was set to \"pairwise\" during authorization. It is the `sub` value of the ID Token that was issued.
    */
    'obfuscatedSubject'?: string;
    /**
    * Scope is a JSON string containing a space-separated list of scopes associated with this token.
    */
    'scope'?: string;
    /**
    * Subject of the token, as defined in JWT [RFC7519]. Usually a machine-readable identifier of the resource owner who authorized this token.
    */
    'sub'?: string;
    /**
    * TokenType is the introspected token's type, for example `access_token` or `refresh_token`.
    */
    'tokenType'?: string;
    /**
    * Username is a human-readable identifier for the resource owner who authorized this token.
    */
    'username'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "active",
            "baseName": "active",
            "type": "boolean"
        },
        {
            "name": "aud",
            "baseName": "aud",
            "type": "Array<string>"
        },
        {
            "name": "clientId",
            "baseName": "client_id",
            "type": "string"
        },
        {
            "name": "exp",
            "baseName": "exp",
            "type": "number"
        },
        {
            "name": "ext",
            "baseName": "ext",
            "type": "{ [key: string]: any; }"
        },
        {
            "name": "iat",
            "baseName": "iat",
            "type": "number"
        },
        {
            "name": "iss",
            "baseName": "iss",
            "type": "string"
        },
        {
            "name": "nbf",
            "baseName": "nbf",
            "type": "number"
        },
        {
            "name": "obfuscatedSubject",
            "baseName": "obfuscated_subject",
            "type": "string"
        },
        {
            "name": "scope",
            "baseName": "scope",
            "type": "string"
        },
        {
            "name": "sub",
            "baseName": "sub",
            "type": "string"
        },
        {
            "name": "tokenType",
            "baseName": "token_type",
            "type": "string"
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return OAuth2TokenIntrospection.attributeTypeMap;
    }
}

/**
* The token response
*/
export class OauthTokenResponse {
    /**
    * The access token issued by the authorization server.
    */
    'accessToken'?: string;
    /**
    * The lifetime in seconds of the access token.  For example, the value \"3600\" denotes that the access token will expire in one hour from the time the response was generated.
    */
    'expiresIn'?: number;
    /**
    * To retrieve a refresh token request the id_token scope.
    */
    'idToken'?: number;
    /**
    * The refresh token, which can be used to obtain new access tokens. To retrieve it add the scope \"offline\" to your access token request.
    */
    'refreshToken'?: string;
    /**
    * The scope of the access token
    */
    'scope'?: number;
    /**
    * The type of the token issued
    */
    'tokenType'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "accessToken",
            "baseName": "access_token",
            "type": "string"
        },
        {
            "name": "expiresIn",
            "baseName": "expires_in",
            "type": "number"
        },
        {
            "name": "idToken",
            "baseName": "id_token",
            "type": "number"
        },
        {
            "name": "refreshToken",
            "baseName": "refresh_token",
            "type": "string"
        },
        {
            "name": "scope",
            "baseName": "scope",
            "type": "number"
        },
        {
            "name": "tokenType",
            "baseName": "token_type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return OauthTokenResponse.attributeTypeMap;
    }
}

export class ObjectIdentifier extends Array<number> {

    static discriminator = undefined;

}

export class OpenIDConnectContext {
    /**
    * ACRValues is the Authentication AuthorizationContext Class Reference requested in the OAuth 2.0 Authorization request. It is a parameter defined by OpenID Connect and expresses which level of authentication (e.g. 2FA) is required.  OpenID Connect defines it as follows: > Requested Authentication AuthorizationContext Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication AuthorizationContext Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a Voluntary Claim by this parameter.
    */
    'acrValues'?: Array<string>;
    /**
    * Display is a string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User. The defined values are: page: The Authorization Server SHOULD display the authentication and consent UI consistent with a full User Agent page view. If the display parameter is not specified, this is the default display mode. popup: The Authorization Server SHOULD display the authentication and consent UI consistent with a popup User Agent window. The popup User Agent window should be of an appropriate size for a login-focused dialog and should not obscure the entire window that it is popping up over. touch: The Authorization Server SHOULD display the authentication and consent UI consistent with a device that leverages a touch interface. wap: The Authorization Server SHOULD display the authentication and consent UI consistent with a \"feature phone\" type display.  The Authorization Server MAY also attempt to detect the capabilities of the User Agent and present an appropriate display.
    */
    'display'?: string;
    /**
    * IDTokenHintClaims are the claims of the ID Token previously issued by the Authorization Server being passed as a hint about the End-User's current or past authenticated session with the Client.
    */
    'idTokenHintClaims'?: { [key: string]: any; };
    /**
    * LoginHint hints about the login identifier the End-User might use to log in (if necessary). This hint can be used by an RP if it first asks the End-User for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. This value MAY also be a phone number in the format specified for the phone_number Claim. The use of this parameter is optional.
    */
    'loginHint'?: string;
    /**
    * UILocales is the End-User'id preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value \"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.
    */
    'uiLocales'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "acrValues",
            "baseName": "acr_values",
            "type": "Array<string>"
        },
        {
            "name": "display",
            "baseName": "display",
            "type": "string"
        },
        {
            "name": "idTokenHintClaims",
            "baseName": "id_token_hint_claims",
            "type": "{ [key: string]: any; }"
        },
        {
            "name": "loginHint",
            "baseName": "login_hint",
            "type": "string"
        },
        {
            "name": "uiLocales",
            "baseName": "ui_locales",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return OpenIDConnectContext.attributeTypeMap;
    }
}

/**
* The response used to return handled consent requests same as HandledAuthenticationRequest, just with consent_request exposed as json
*/
export class PreviousConsentSession {
    'consentRequest'?: ConsentRequest;
    /**
    * GrantScope sets the scope the user authorized the client to use. Should be a subset of `requested_scope`
    */
    'grantScope'?: Array<string>;
    /**
    * Remember, if set to true, tells ORY Hydra to remember this consent authorization and reuse it if the same client asks the same user for the same, or a subset of, scope.
    */
    'remember'?: boolean;
    /**
    * RememberFor sets how long the consent authorization should be remembered for in seconds. If set to `0`, the authorization will be remembered indefinitely.
    */
    'rememberFor'?: number;
    'session'?: ConsentRequestSession;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "consentRequest",
            "baseName": "consent_request",
            "type": "ConsentRequest"
        },
        {
            "name": "grantScope",
            "baseName": "grant_scope",
            "type": "Array<string>"
        },
        {
            "name": "remember",
            "baseName": "remember",
            "type": "boolean"
        },
        {
            "name": "rememberFor",
            "baseName": "remember_for",
            "type": "number"
        },
        {
            "name": "session",
            "baseName": "session",
            "type": "ConsentRequestSession"
        }    ];

    static getAttributeTypeMap() {
        return PreviousConsentSession.attributeTypeMap;
    }
}

export class PublicKeyAlgorithm {

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return PublicKeyAlgorithm.attributeTypeMap;
    }
}

/**
* It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.
*/
export class RawMessage extends Array<number> {

    static discriminator = undefined;

}

export class RejectRequest {
    'error'?: string;
    'errorDebug'?: string;
    'errorDescription'?: string;
    'errorHint'?: string;
    'statusCode'?: number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "error",
            "baseName": "error",
            "type": "string"
        },
        {
            "name": "errorDebug",
            "baseName": "error_debug",
            "type": "string"
        },
        {
            "name": "errorDescription",
            "baseName": "error_description",
            "type": "string"
        },
        {
            "name": "errorHint",
            "baseName": "error_hint",
            "type": "string"
        },
        {
            "name": "statusCode",
            "baseName": "status_code",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return RejectRequest.attributeTypeMap;
    }
}

export class SignatureAlgorithm {

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return SignatureAlgorithm.attributeTypeMap;
    }
}

export class SwaggerFlushInactiveAccessTokens {
    'body'?: FlushInactiveOAuth2TokensRequest;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "body",
            "baseName": "Body",
            "type": "FlushInactiveOAuth2TokensRequest"
        }    ];

    static getAttributeTypeMap() {
        return SwaggerFlushInactiveAccessTokens.attributeTypeMap;
    }
}

export class SwaggerJsonWebKeyQuery {
    /**
    * The kid of the desired key in: path
    */
    'kid': string;
    /**
    * The set in: path
    */
    'set': string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "kid",
            "baseName": "kid",
            "type": "string"
        },
        {
            "name": "set",
            "baseName": "set",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return SwaggerJsonWebKeyQuery.attributeTypeMap;
    }
}

export class SwaggerJwkCreateSet {
    'body'?: JsonWebKeySetGeneratorRequest;
    /**
    * The set in: path
    */
    'set': string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "body",
            "baseName": "Body",
            "type": "JsonWebKeySetGeneratorRequest"
        },
        {
            "name": "set",
            "baseName": "set",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return SwaggerJwkCreateSet.attributeTypeMap;
    }
}

export class SwaggerJwkSetQuery {
    /**
    * The set in: path
    */
    'set': string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "set",
            "baseName": "set",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return SwaggerJwkSetQuery.attributeTypeMap;
    }
}

export class SwaggerJwkUpdateSet {
    'body'?: JsonWebKeySet;
    /**
    * The set in: path
    */
    'set': string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "body",
            "baseName": "Body",
            "type": "JsonWebKeySet"
        },
        {
            "name": "set",
            "baseName": "set",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return SwaggerJwkUpdateSet.attributeTypeMap;
    }
}

export class SwaggerJwkUpdateSetKey {
    'body'?: JsonWebKey;
    /**
    * The kid of the desired key in: path
    */
    'kid': string;
    /**
    * The set in: path
    */
    'set': string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "body",
            "baseName": "Body",
            "type": "JsonWebKey"
        },
        {
            "name": "kid",
            "baseName": "kid",
            "type": "string"
        },
        {
            "name": "set",
            "baseName": "set",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return SwaggerJwkUpdateSetKey.attributeTypeMap;
    }
}

export class SwaggerOAuthIntrospectionRequest {
    /**
    * An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false.  in: formData
    */
    'scope'?: string;
    /**
    * The string value of the token. For access tokens, this is the \"access_token\" value returned from the token endpoint defined in OAuth 2.0 [RFC6749], Section 5.1. This endpoint DOES NOT accept refresh tokens for validation.
    */
    'token': string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "scope",
            "baseName": "scope",
            "type": "string"
        },
        {
            "name": "token",
            "baseName": "token",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return SwaggerOAuthIntrospectionRequest.attributeTypeMap;
    }
}

export class SwaggerRevokeOAuth2TokenParameters {
    /**
    * in: formData
    */
    'token': string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "token",
            "baseName": "token",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return SwaggerRevokeOAuth2TokenParameters.attributeTypeMap;
    }
}

/**
* The general form represented is:  [scheme:][//[userinfo@]host][/]path[?query][#fragment]  URLs that do not start with a slash after the scheme are interpreted as:  scheme:opaque[?query][#fragment]  Note that the Path field is stored in decoded form: /%47%6f%2f becomes /Go/. A consequence is that it is impossible to tell which slashes in the Path were slashes in the raw URL and which were %2f. This distinction is rarely important, but when it is, code must not use Path directly. The Parse function sets both Path and RawPath in the URL it returns, and URL's String method uses RawPath if it is a valid encoding of Path, by calling the EscapedPath method.
*/
export class URL {
    'forceQuery'?: boolean;
    'fragment'?: string;
    'host'?: string;
    'opaque'?: string;
    'path'?: string;
    'rawPath'?: string;
    'rawQuery'?: string;
    'scheme'?: string;
    'user'?: Userinfo;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "forceQuery",
            "baseName": "ForceQuery",
            "type": "boolean"
        },
        {
            "name": "fragment",
            "baseName": "Fragment",
            "type": "string"
        },
        {
            "name": "host",
            "baseName": "Host",
            "type": "string"
        },
        {
            "name": "opaque",
            "baseName": "Opaque",
            "type": "string"
        },
        {
            "name": "path",
            "baseName": "Path",
            "type": "string"
        },
        {
            "name": "rawPath",
            "baseName": "RawPath",
            "type": "string"
        },
        {
            "name": "rawQuery",
            "baseName": "RawQuery",
            "type": "string"
        },
        {
            "name": "scheme",
            "baseName": "Scheme",
            "type": "string"
        },
        {
            "name": "user",
            "baseName": "User",
            "type": "Userinfo"
        }    ];

    static getAttributeTypeMap() {
        return URL.attributeTypeMap;
    }
}

/**
* The Userinfo type is an immutable encapsulation of username and password details for a URL. An existing Userinfo value is guaranteed to have a username set (potentially empty, as allowed by RFC 2396), and optionally a password.
*/
export class Userinfo {

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return Userinfo.attributeTypeMap;
    }
}

/**
* The userinfo response
*/
export class UserinfoResponse {
    /**
    * End-User's birthday, represented as an ISO 8601:2004 [ISO8601‑2004] YYYY-MM-DD format. The year MAY be 0000, indicating that it is omitted. To represent only the year, YYYY format is allowed. Note that depending on the underlying platform's date related function, providing just year can result in varying month and day, so the implementers need to take this factor into account to correctly process the dates.
    */
    'birthdate'?: string;
    /**
    * End-User's preferred e-mail address. Its value MUST conform to the RFC 5322 [RFC5322] addr-spec syntax. The RP MUST NOT rely upon this value being unique, as discussed in Section 5.7.
    */
    'email'?: string;
    /**
    * True if the End-User's e-mail address has been verified; otherwise false. When this Claim Value is true, this means that the OP took affirmative steps to ensure that this e-mail address was controlled by the End-User at the time the verification was performed. The means by which an e-mail address is verified is context-specific, and dependent upon the trust framework or contractual agreements within which the parties are operating.
    */
    'emailVerified'?: boolean;
    /**
    * Surname(s) or last name(s) of the End-User. Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.
    */
    'familyName'?: string;
    /**
    * End-User's gender. Values defined by this specification are female and male. Other values MAY be used when neither of the defined values are applicable.
    */
    'gender'?: string;
    /**
    * Given name(s) or first name(s) of the End-User. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.
    */
    'givenName'?: string;
    /**
    * End-User's locale, represented as a BCP47 [RFC5646] language tag. This is typically an ISO 639-1 Alpha-2 [ISO639‑1] language code in lowercase and an ISO 3166-1 Alpha-2 [ISO3166‑1] country code in uppercase, separated by a dash. For example, en-US or fr-CA. As a compatibility note, some implementations have used an underscore as the separator rather than a dash, for example, en_US; Relying Parties MAY choose to accept this locale syntax as well.
    */
    'locale'?: string;
    /**
    * Middle name(s) of the End-User. Note that in some cultures, people can have multiple middle names; all can be present, with the names being separated by space characters. Also note that in some cultures, middle names are not used.
    */
    'middleName'?: string;
    /**
    * End-User's full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User's locale and preferences.
    */
    'name'?: string;
    /**
    * Casual name of the End-User that may or may not be the same as the given_name. For instance, a nickname value of Mike might be returned alongside a given_name value of Michael.
    */
    'nickname'?: string;
    /**
    * End-User's preferred telephone number. E.164 [E.164] is RECOMMENDED as the format of this Claim, for example, +1 (425) 555-1212 or +56 (2) 687 2400. If the phone number contains an extension, it is RECOMMENDED that the extension be represented using the RFC 3966 [RFC3966] extension syntax, for example, +1 (604) 555-1234;ext=5678.
    */
    'phoneNumber'?: string;
    /**
    * True if the End-User's phone number has been verified; otherwise false. When this Claim Value is true, this means that the OP took affirmative steps to ensure that this phone number was controlled by the End-User at the time the verification was performed. The means by which a phone number is verified is context-specific, and dependent upon the trust framework or contractual agreements within which the parties are operating. When true, the phone_number Claim MUST be in E.164 format and any extensions MUST be represented in RFC 3966 format.
    */
    'phoneNumberVerified'?: boolean;
    /**
    * URL of the End-User's profile picture. This URL MUST refer to an image file (for example, a PNG, JPEG, or GIF image file), rather than to a Web page containing an image. Note that this URL SHOULD specifically reference a profile photo of the End-User suitable for displaying when describing the End-User, rather than an arbitrary photo taken by the End-User.
    */
    'picture'?: string;
    /**
    * Non-unique shorthand name by which the End-User wishes to be referred to at the RP, such as janedoe or j.doe. This value MAY be any valid JSON string including special characters such as @, /, or whitespace.
    */
    'preferredUsername'?: string;
    /**
    * URL of the End-User's profile page. The contents of this Web page SHOULD be about the End-User.
    */
    'profile'?: string;
    /**
    * Subject - Identifier for the End-User at the IssuerURL.
    */
    'sub'?: string;
    /**
    * Time the End-User's information was last updated. Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time.
    */
    'updatedAt'?: number;
    /**
    * URL of the End-User's Web page or blog. This Web page SHOULD contain information published by the End-User or an organization that the End-User is affiliated with.
    */
    'website'?: string;
    /**
    * String from zoneinfo [zoneinfo] time zone database representing the End-User's time zone. For example, Europe/Paris or America/Los_Angeles.
    */
    'zoneinfo'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "birthdate",
            "baseName": "birthdate",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "emailVerified",
            "baseName": "email_verified",
            "type": "boolean"
        },
        {
            "name": "familyName",
            "baseName": "family_name",
            "type": "string"
        },
        {
            "name": "gender",
            "baseName": "gender",
            "type": "string"
        },
        {
            "name": "givenName",
            "baseName": "given_name",
            "type": "string"
        },
        {
            "name": "locale",
            "baseName": "locale",
            "type": "string"
        },
        {
            "name": "middleName",
            "baseName": "middle_name",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "nickname",
            "baseName": "nickname",
            "type": "string"
        },
        {
            "name": "phoneNumber",
            "baseName": "phone_number",
            "type": "string"
        },
        {
            "name": "phoneNumberVerified",
            "baseName": "phone_number_verified",
            "type": "boolean"
        },
        {
            "name": "picture",
            "baseName": "picture",
            "type": "string"
        },
        {
            "name": "preferredUsername",
            "baseName": "preferred_username",
            "type": "string"
        },
        {
            "name": "profile",
            "baseName": "profile",
            "type": "string"
        },
        {
            "name": "sub",
            "baseName": "sub",
            "type": "string"
        },
        {
            "name": "updatedAt",
            "baseName": "updated_at",
            "type": "number"
        },
        {
            "name": "website",
            "baseName": "website",
            "type": "string"
        },
        {
            "name": "zoneinfo",
            "baseName": "zoneinfo",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return UserinfoResponse.attributeTypeMap;
    }
}

export class Version {
    'version'?: string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "version",
            "baseName": "version",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return Version.attributeTypeMap;
    }
}

export class WellKnown {
    /**
    * URL of the OP's OAuth 2.0 Authorization Endpoint.
    */
    'authorizationEndpoint': string;
    /**
    * Boolean value specifying whether the OP supports use of the claims parameter, with true indicating support.
    */
    'claimsParameterSupported'?: boolean;
    /**
    * JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for. Note that for privacy or other reasons, this might not be an exhaustive list.
    */
    'claimsSupported'?: Array<string>;
    /**
    * JSON array containing a list of the OAuth 2.0 Grant Type values that this OP supports.
    */
    'grantTypesSupported'?: Array<string>;
    /**
    * JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT.
    */
    'idTokenSigningAlgValuesSupported': Array<string>;
    /**
    * URL using the https scheme with no query or fragment component that the OP asserts as its IssuerURL Identifier. If IssuerURL discovery is supported , this value MUST be identical to the issuer value returned by WebFinger. This also MUST be identical to the iss Claim value in ID Tokens issued from this IssuerURL.
    */
    'issuer': string;
    /**
    * URL of the OP's JSON Web Key Set [JWK] document. This contains the signing key(s) the RP uses to validate signatures from the OP. The JWK Set MAY also contain the Server's encryption key(s), which are used by RPs to encrypt requests to the Server. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
    */
    'jwksUri': string;
    /**
    * URL of the OP's Dynamic Client Registration Endpoint.
    */
    'registrationEndpoint'?: string;
    /**
    * Boolean value specifying whether the OP supports use of the request parameter, with true indicating support.
    */
    'requestParameterSupported'?: boolean;
    /**
    * Boolean value specifying whether the OP supports use of the request_uri parameter, with true indicating support.
    */
    'requestUriParameterSupported'?: boolean;
    /**
    * Boolean value specifying whether the OP requires any request_uri values used to be pre-registered using the request_uris registration parameter.
    */
    'requireRequestUriRegistration'?: boolean;
    /**
    * JSON array containing a list of the OAuth 2.0 response_mode values that this OP supports.
    */
    'responseModesSupported'?: Array<string>;
    /**
    * JSON array containing a list of the OAuth 2.0 response_type values that this OP supports. Dynamic OpenID Providers MUST support the code, id_token, and the token id_token Response Type values.
    */
    'responseTypesSupported': Array<string>;
    /**
    * SON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports. The server MUST support the openid scope value. Servers MAY choose not to advertise some supported scope values even when this parameter is used
    */
    'scopesSupported'?: Array<string>;
    /**
    * JSON array containing a list of the Subject Identifier types that this OP supports. Valid types include pairwise and public.
    */
    'subjectTypesSupported': Array<string>;
    /**
    * URL of the OP's OAuth 2.0 Token Endpoint
    */
    'tokenEndpoint': string;
    /**
    * JSON array containing a list of Client Authentication methods supported by this Token Endpoint. The options are client_secret_post, client_secret_basic, client_secret_jwt, and private_key_jwt, as described in Section 9 of OpenID Connect Core 1.0
    */
    'tokenEndpointAuthMethodsSupported'?: Array<string>;
    /**
    * URL of the OP's UserInfo Endpoint.
    */
    'userinfoEndpoint'?: string;
    /**
    * JSON array containing a list of the JWS [JWS] signing algorithms (alg values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT].
    */
    'userinfoSigningAlgValuesSupported'?: Array<string>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "authorizationEndpoint",
            "baseName": "authorization_endpoint",
            "type": "string"
        },
        {
            "name": "claimsParameterSupported",
            "baseName": "claims_parameter_supported",
            "type": "boolean"
        },
        {
            "name": "claimsSupported",
            "baseName": "claims_supported",
            "type": "Array<string>"
        },
        {
            "name": "grantTypesSupported",
            "baseName": "grant_types_supported",
            "type": "Array<string>"
        },
        {
            "name": "idTokenSigningAlgValuesSupported",
            "baseName": "id_token_signing_alg_values_supported",
            "type": "Array<string>"
        },
        {
            "name": "issuer",
            "baseName": "issuer",
            "type": "string"
        },
        {
            "name": "jwksUri",
            "baseName": "jwks_uri",
            "type": "string"
        },
        {
            "name": "registrationEndpoint",
            "baseName": "registration_endpoint",
            "type": "string"
        },
        {
            "name": "requestParameterSupported",
            "baseName": "request_parameter_supported",
            "type": "boolean"
        },
        {
            "name": "requestUriParameterSupported",
            "baseName": "request_uri_parameter_supported",
            "type": "boolean"
        },
        {
            "name": "requireRequestUriRegistration",
            "baseName": "require_request_uri_registration",
            "type": "boolean"
        },
        {
            "name": "responseModesSupported",
            "baseName": "response_modes_supported",
            "type": "Array<string>"
        },
        {
            "name": "responseTypesSupported",
            "baseName": "response_types_supported",
            "type": "Array<string>"
        },
        {
            "name": "scopesSupported",
            "baseName": "scopes_supported",
            "type": "Array<string>"
        },
        {
            "name": "subjectTypesSupported",
            "baseName": "subject_types_supported",
            "type": "Array<string>"
        },
        {
            "name": "tokenEndpoint",
            "baseName": "token_endpoint",
            "type": "string"
        },
        {
            "name": "tokenEndpointAuthMethodsSupported",
            "baseName": "token_endpoint_auth_methods_supported",
            "type": "Array<string>"
        },
        {
            "name": "userinfoEndpoint",
            "baseName": "userinfo_endpoint",
            "type": "string"
        },
        {
            "name": "userinfoSigningAlgValuesSupported",
            "baseName": "userinfo_signing_alg_values_supported",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return WellKnown.attributeTypeMap;
    }
}


let enumsMap: {[index: string]: any} = {
}

let typeMap: {[index: string]: any} = {
    "AcceptConsentRequest": AcceptConsentRequest,
    "AcceptLoginRequest": AcceptLoginRequest,
    "AttributeTypeAndValue": AttributeTypeAndValue,
    "AuthenticationSession": AuthenticationSession,
    "Certificate": Certificate,
    "CompletedRequest": CompletedRequest,
    "ConsentRequest": ConsentRequest,
    "ConsentRequestSession": ConsentRequestSession,
    "ExtKeyUsage": ExtKeyUsage,
    "Extension": Extension,
    "FlushInactiveOAuth2TokensRequest": FlushInactiveOAuth2TokensRequest,
    "HealthNotReadyStatus": HealthNotReadyStatus,
    "HealthStatus": HealthStatus,
    "IP": IP,
    "IPMask": IPMask,
    "IPNet": IPNet,
    "InlineResponse401": InlineResponse401,
    "JSONWebKey": JSONWebKey,
    "JSONWebKeySet": JSONWebKeySet,
    "JoseWebKeySetRequest": JoseWebKeySetRequest,
    "JsonWebKey": JsonWebKey,
    "JsonWebKeySet": JsonWebKeySet,
    "JsonWebKeySetGeneratorRequest": JsonWebKeySetGeneratorRequest,
    "KeyUsage": KeyUsage,
    "LoginRequest": LoginRequest,
    "ModelInt": ModelInt,
    "Name": Name,
    "OAuth2Client": OAuth2Client,
    "OAuth2TokenIntrospection": OAuth2TokenIntrospection,
    "OauthTokenResponse": OauthTokenResponse,
    "ObjectIdentifier": ObjectIdentifier,
    "OpenIDConnectContext": OpenIDConnectContext,
    "PreviousConsentSession": PreviousConsentSession,
    "PublicKeyAlgorithm": PublicKeyAlgorithm,
    "RawMessage": RawMessage,
    "RejectRequest": RejectRequest,
    "SignatureAlgorithm": SignatureAlgorithm,
    "SwaggerFlushInactiveAccessTokens": SwaggerFlushInactiveAccessTokens,
    "SwaggerJsonWebKeyQuery": SwaggerJsonWebKeyQuery,
    "SwaggerJwkCreateSet": SwaggerJwkCreateSet,
    "SwaggerJwkSetQuery": SwaggerJwkSetQuery,
    "SwaggerJwkUpdateSet": SwaggerJwkUpdateSet,
    "SwaggerJwkUpdateSetKey": SwaggerJwkUpdateSetKey,
    "SwaggerOAuthIntrospectionRequest": SwaggerOAuthIntrospectionRequest,
    "SwaggerRevokeOAuth2TokenParameters": SwaggerRevokeOAuth2TokenParameters,
    "URL": URL,
    "Userinfo": Userinfo,
    "UserinfoResponse": UserinfoResponse,
    "Version": Version,
    "WellKnown": WellKnown,
}

export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: localVarRequest.Options): void;
}

export class HttpBasicAuth implements Authentication {
    public username: string = '';
    public password: string = '';

    applyToRequest(requestOptions: localVarRequest.Options): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

export class ApiKeyAuth implements Authentication {
    public apiKey: string = '';

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (this.location == "query") {
            (<any>requestOptions.qs)[this.paramName] = this.apiKey;
        } else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

export class OAuth implements Authentication {
    public accessToken: string = '';

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}

export class VoidAuth implements Authentication {
    public username: string = '';
    public password: string = '';

    applyToRequest(_: localVarRequest.Options): void {
        // Do nothing
    }
}

export enum HealthApiApiKeys {
}

export class HealthApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'basic': new HttpBasicAuth(),
        'oauth2': new OAuth(),
    }

    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            this.username = basePathOrUsername;
            this.password = password
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: HealthApiApiKeys, value: string) {
        (this.authentications as any)[HealthApiApiKeys[key]].apiKey = value;
    }
    set username(username: string) {
        this.authentications.basic.username = username;
    }

    set password(password: string) {
        this.authentications.basic.password = password;
    }

    set accessToken(token: string) {
        this.authentications.oauth2.accessToken = token;
    }
    /**
     * This endpoint returns a 200 status code when the HTTP server is up running. This status does currently not include checks whether the database connection is working. This endpoint does not require the `X-Forwarded-Proto` header when TLS termination is set.  Be aware that if you are running multiple nodes of ORY Hydra, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check the Alive Status
     */
    public isInstanceAlive () : Promise<{ response: http.ClientResponse; body: HealthStatus;  }> {
        const localVarPath = this.basePath + '/health/alive';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: HealthStatus;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "HealthStatus");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This endpoint returns a 200 status code when the HTTP server is up running and the environment dependencies (e.g. the database) are responsive as well.  This status does currently not include checks whether the database connection is working. This endpoint does not require the `X-Forwarded-Proto` header when TLS termination is set.  Be aware that if you are running multiple nodes of ORY Hydra, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check the Readiness Status
     */
    public isInstanceReady () : Promise<{ response: http.ClientResponse; body: HealthStatus;  }> {
        const localVarPath = this.basePath + '/health/ready';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: HealthStatus;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "HealthStatus");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum JsonWebKeyApiApiKeys {
}

export class JsonWebKeyApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'basic': new HttpBasicAuth(),
        'oauth2': new OAuth(),
    }

    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            this.username = basePathOrUsername;
            this.password = password
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: JsonWebKeyApiApiKeys, value: string) {
        (this.authentications as any)[JsonWebKeyApiApiKeys[key]].apiKey = value;
    }
    set username(username: string) {
        this.authentications.basic.username = username;
    }

    set password(password: string) {
        this.authentications.basic.password = password;
    }

    set accessToken(token: string) {
        this.authentications.oauth2.accessToken = token;
    }
    /**
     * This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Generate a new JSON Web Key
     * @param set The set
     * @param body 
     */
    public createJsonWebKeySet (set: string, body?: JsonWebKeySetGeneratorRequest) : Promise<{ response: http.ClientResponse; body: JsonWebKeySet;  }> {
        const localVarPath = this.basePath + '/keys/{set}'
            .replace('{' + 'set' + '}', encodeURIComponent(String(set)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'set' is not null or undefined
        if (set === null || set === undefined) {
            throw new Error('Required parameter set was null or undefined when calling createJsonWebKeySet.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "JsonWebKeySetGeneratorRequest")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: JsonWebKeySet;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "JsonWebKeySet");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Delete a JSON Web Key
     * @param kid The kid of the desired key
     * @param set The set
     */
    public deleteJsonWebKey (kid: string, set: string) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/keys/{set}/{kid}'
            .replace('{' + 'kid' + '}', encodeURIComponent(String(kid)))
            .replace('{' + 'set' + '}', encodeURIComponent(String(set)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'kid' is not null or undefined
        if (kid === null || kid === undefined) {
            throw new Error('Required parameter kid was null or undefined when calling deleteJsonWebKey.');
        }

        // verify required parameter 'set' is not null or undefined
        if (set === null || set === undefined) {
            throw new Error('Required parameter set was null or undefined when calling deleteJsonWebKey.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Delete a JSON Web Key Set
     * @param set The set
     */
    public deleteJsonWebKeySet (set: string) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/keys/{set}'
            .replace('{' + 'set' + '}', encodeURIComponent(String(set)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'set' is not null or undefined
        if (set === null || set === undefined) {
            throw new Error('Required parameter set was null or undefined when calling deleteJsonWebKeySet.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This endpoint can be used to retrieve JWKs stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Retrieve a JSON Web Key
     * @param kid The kid of the desired key
     * @param set The set
     */
    public getJsonWebKey (kid: string, set: string) : Promise<{ response: http.ClientResponse; body: JsonWebKeySet;  }> {
        const localVarPath = this.basePath + '/keys/{set}/{kid}'
            .replace('{' + 'kid' + '}', encodeURIComponent(String(kid)))
            .replace('{' + 'set' + '}', encodeURIComponent(String(set)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'kid' is not null or undefined
        if (kid === null || kid === undefined) {
            throw new Error('Required parameter kid was null or undefined when calling getJsonWebKey.');
        }

        // verify required parameter 'set' is not null or undefined
        if (set === null || set === undefined) {
            throw new Error('Required parameter set was null or undefined when calling getJsonWebKey.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: JsonWebKeySet;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "JsonWebKeySet");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Retrieve a JSON Web Key Set
     * @param set The set
     */
    public getJsonWebKeySet (set: string) : Promise<{ response: http.ClientResponse; body: JsonWebKeySet;  }> {
        const localVarPath = this.basePath + '/keys/{set}'
            .replace('{' + 'set' + '}', encodeURIComponent(String(set)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'set' is not null or undefined
        if (set === null || set === undefined) {
            throw new Error('Required parameter set was null or undefined when calling getJsonWebKeySet.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: JsonWebKeySet;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "JsonWebKeySet");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Update a JSON Web Key
     * @param kid The kid of the desired key
     * @param set The set
     * @param body 
     */
    public updateJsonWebKey (kid: string, set: string, body?: JsonWebKey) : Promise<{ response: http.ClientResponse; body: JsonWebKey;  }> {
        const localVarPath = this.basePath + '/keys/{set}/{kid}'
            .replace('{' + 'kid' + '}', encodeURIComponent(String(kid)))
            .replace('{' + 'set' + '}', encodeURIComponent(String(set)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'kid' is not null or undefined
        if (kid === null || kid === undefined) {
            throw new Error('Required parameter kid was null or undefined when calling updateJsonWebKey.');
        }

        // verify required parameter 'set' is not null or undefined
        if (set === null || set === undefined) {
            throw new Error('Required parameter set was null or undefined when calling updateJsonWebKey.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "JsonWebKey")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: JsonWebKey;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "JsonWebKey");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Update a JSON Web Key Set
     * @param set The set
     * @param body 
     */
    public updateJsonWebKeySet (set: string, body?: JsonWebKeySet) : Promise<{ response: http.ClientResponse; body: JsonWebKeySet;  }> {
        const localVarPath = this.basePath + '/keys/{set}'
            .replace('{' + 'set' + '}', encodeURIComponent(String(set)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'set' is not null or undefined
        if (set === null || set === undefined) {
            throw new Error('Required parameter set was null or undefined when calling updateJsonWebKeySet.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "JsonWebKeySet")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: JsonWebKeySet;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "JsonWebKeySet");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum MetricsApiApiKeys {
}

export class MetricsApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'basic': new HttpBasicAuth(),
        'oauth2': new OAuth(),
    }

    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            this.username = basePathOrUsername;
            this.password = password
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: MetricsApiApiKeys, value: string) {
        (this.authentications as any)[MetricsApiApiKeys[key]].apiKey = value;
    }
    set username(username: string) {
        this.authentications.basic.username = username;
    }

    set password(password: string) {
        this.authentications.basic.password = password;
    }

    set accessToken(token: string) {
        this.authentications.oauth2.accessToken = token;
    }
    /**
     * This endpoint returns metrics formatted for Prometheus.
     * @summary Retrieve Prometheus metrics
     */
    public getPrometheusMetrics () : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/metrics/prometheus';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum OAuth2ApiApiKeys {
}

export class OAuth2Api {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'basic': new HttpBasicAuth(),
        'oauth2': new OAuth(),
    }

    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            this.username = basePathOrUsername;
            this.password = password
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: OAuth2ApiApiKeys, value: string) {
        (this.authentications as any)[OAuth2ApiApiKeys[key]].apiKey = value;
    }
    set username(username: string) {
        this.authentications.basic.username = username;
    }

    set password(password: string) {
        this.authentications.basic.password = password;
    }

    set accessToken(token: string) {
        this.authentications.oauth2.accessToken = token;
    }
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the user and then tell ORY Hydra now about it. If the user authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the user's behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a user interface which asks the user to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider's URL to which the user's user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the user accepted or rejected the request.  This endpoint tells ORY Hydra that the user has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Accept an consent request
     * @param challenge 
     * @param body 
     */
    public acceptConsentRequest (challenge: string, body?: AcceptConsentRequest) : Promise<{ response: http.ClientResponse; body: CompletedRequest;  }> {
        const localVarPath = this.basePath + '/oauth2/auth/requests/consent/{challenge}/accept'
            .replace('{' + 'challenge' + '}', encodeURIComponent(String(challenge)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'challenge' is not null or undefined
        if (challenge === null || challenge === undefined) {
            throw new Error('Required parameter challenge was null or undefined when calling acceptConsentRequest.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "AcceptConsentRequest")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: CompletedRequest;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "CompletedRequest");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the user and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the user a login screen\") a user (in OAuth2 the proper name for user is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the user's user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the user has successfully authenticated and includes additional information such as the user's ID and if ORY Hydra should remember the user's user agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @summary Accept an login request
     * @param challenge 
     * @param body 
     */
    public acceptLoginRequest (challenge: string, body?: AcceptLoginRequest) : Promise<{ response: http.ClientResponse; body: CompletedRequest;  }> {
        const localVarPath = this.basePath + '/oauth2/auth/requests/login/{challenge}/accept'
            .replace('{' + 'challenge' + '}', encodeURIComponent(String(challenge)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'challenge' is not null or undefined
        if (challenge === null || challenge === undefined) {
            throw new Error('Required parameter challenge was null or undefined when calling acceptLoginRequest.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "AcceptLoginRequest")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: CompletedRequest;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "CompletedRequest");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Create a new OAuth 2.0 client If you pass `client_secret` the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.
     * @summary Create an OAuth 2.0 client
     * @param body 
     */
    public createOAuth2Client (body: OAuth2Client) : Promise<{ response: http.ClientResponse; body: OAuth2Client;  }> {
        const localVarPath = this.basePath + '/clients';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createOAuth2Client.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "OAuth2Client")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: OAuth2Client;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "OAuth2Client");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.
     * @summary Deletes an OAuth 2.0 Client
     * @param id The id of the OAuth 2.0 Client.
     */
    public deleteOAuth2Client (id: string) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/clients/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteOAuth2Client.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be not be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted automatically when performing the refresh flow.
     * @summary Flush Expired OAuth2 Access Tokens
     * @param body 
     */
    public flushInactiveOAuth2Tokens (body?: FlushInactiveOAuth2TokensRequest) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/oauth2/flush';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "FlushInactiveOAuth2TokensRequest")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the user and then tell ORY Hydra now about it. If the user authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the user's behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a user interface which asks the user to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider's URL to which the user's user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the user accepted or rejected the request.
     * @summary Get consent request information
     * @param challenge 
     */
    public getConsentRequest (challenge: string) : Promise<{ response: http.ClientResponse; body: ConsentRequest;  }> {
        const localVarPath = this.basePath + '/oauth2/auth/requests/consent/{challenge}'
            .replace('{' + 'challenge' + '}', encodeURIComponent(String(challenge)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'challenge' is not null or undefined
        if (challenge === null || challenge === undefined) {
            throw new Error('Required parameter challenge was null or undefined when calling getConsentRequest.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ConsentRequest;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ConsentRequest");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the user and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the user a login screen\") a user (in OAuth2 the proper name for user is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the user's user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
     * @summary Get an login request
     * @param challenge 
     */
    public getLoginRequest (challenge: string) : Promise<{ response: http.ClientResponse; body: LoginRequest;  }> {
        const localVarPath = this.basePath + '/oauth2/auth/requests/login/{challenge}'
            .replace('{' + 'challenge' + '}', encodeURIComponent(String(challenge)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'challenge' is not null or undefined
        if (challenge === null || challenge === undefined) {
            throw new Error('Required parameter challenge was null or undefined when calling getLoginRequest.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: LoginRequest;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "LoginRequest");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get an OAUth 2.0 client by its ID. This endpoint never returns passwords.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.
     * @summary Get an OAuth 2.0 Client.
     * @param id The id of the OAuth 2.0 Client.
     */
    public getOAuth2Client (id: string) : Promise<{ response: http.ClientResponse; body: OAuth2Client;  }> {
        const localVarPath = this.basePath + '/clients/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getOAuth2Client.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: OAuth2Client;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "OAuth2Client");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * The well known endpoint an be used to retrieve information for OpenID Connect clients. We encourage you to not roll your own OpenID Connect client but to use an OpenID Connect client library instead. You can learn more on this flow at https://openid.net/specs/openid-connect-discovery-1_0.html
     * @summary Server well known configuration
     */
    public getWellKnown () : Promise<{ response: http.ClientResponse; body: WellKnown;  }> {
        const localVarPath = this.basePath + '/.well-known/openid-configuration';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WellKnown;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "WellKnown");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting `accessTokenExtra` during the consent flow.
     * @summary Introspect OAuth2 tokens
     * @param token The string value of the token. For access tokens, this is the \&quot;access_token\&quot; value returned from the token endpoint defined in OAuth 2.0 [RFC6749], Section 5.1. This endpoint DOES NOT accept refresh tokens for validation.
     * @param scope An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false.
     */
    public introspectOAuth2Token (token: string, scope?: string) : Promise<{ response: http.ClientResponse; body: OAuth2TokenIntrospection;  }> {
        const localVarPath = this.basePath + '/oauth2/introspect';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling introspectOAuth2Token.');
        }


        let localVarUseFormData = false;

        if (token !== undefined) {
            localVarFormParams['token'] = ObjectSerializer.serialize(token, "string");
        }

        if (scope !== undefined) {
            localVarFormParams['scope'] = ObjectSerializer.serialize(scope, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.basic.applyToRequest(localVarRequestOptions);

        this.authentications.oauth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: OAuth2TokenIntrospection;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "OAuth2TokenIntrospection");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This endpoint lists all clients in the database, and never returns client secrets.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.
     * @summary List OAuth 2.0 Clients
     * @param limit The maximum amount of policies returned.
     * @param offset The offset from where to start looking.
     */
    public listOAuth2Clients (limit?: number, offset?: number) : Promise<{ response: http.ClientResponse; body: Array<OAuth2Client>;  }> {
        const localVarPath = this.basePath + '/clients';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }

        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<OAuth2Client>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<OAuth2Client>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This endpoint lists all user's granted consent sessions, including client and granted scope
     * @summary Lists all consent sessions of a user
     * @param user 
     */
    public listUserConsentSessions (user: string) : Promise<{ response: http.ClientResponse; body: Array<PreviousConsentSession>;  }> {
        const localVarPath = this.basePath + '/oauth2/auth/sessions/consent/{user}'
            .replace('{' + 'user' + '}', encodeURIComponent(String(user)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'user' is not null or undefined
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling listUserConsentSessions.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<PreviousConsentSession>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<PreviousConsentSession>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This endpoint is not documented here because you should never use your own implementation to perform OAuth2 flows. OAuth2 is a very popular protocol and a library for your programming language will exists.  To learn more about this flow please refer to the specification: https://tools.ietf.org/html/rfc6749
     * @summary The OAuth 2.0 authorize endpoint
     */
    public oauthAuth () : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/oauth2/auth';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This endpoint is not documented here because you should never use your own implementation to perform OAuth2 flows. OAuth2 is a very popular protocol and a library for your programming language will exists.  To learn more about this flow please refer to the specification: https://tools.ietf.org/html/rfc6749
     * @summary The OAuth 2.0 token endpoint
     */
    public oauthToken () : Promise<{ response: http.ClientResponse; body: OauthTokenResponse;  }> {
        const localVarPath = this.basePath + '/oauth2/token';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.basic.applyToRequest(localVarRequestOptions);

        this.authentications.oauth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: OauthTokenResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "OauthTokenResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the user and then tell ORY Hydra now about it. If the user authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the user's behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a user interface which asks the user to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider's URL to which the user's user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the user accepted or rejected the request.  This endpoint tells ORY Hydra that the user has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Reject an consent request
     * @param challenge 
     * @param body 
     */
    public rejectConsentRequest (challenge: string, body?: RejectRequest) : Promise<{ response: http.ClientResponse; body: CompletedRequest;  }> {
        const localVarPath = this.basePath + '/oauth2/auth/requests/consent/{challenge}/reject'
            .replace('{' + 'challenge' + '}', encodeURIComponent(String(challenge)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'challenge' is not null or undefined
        if (challenge === null || challenge === undefined) {
            throw new Error('Required parameter challenge was null or undefined when calling rejectConsentRequest.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "RejectRequest")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: CompletedRequest;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "CompletedRequest");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the user and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the user a login screen\") a user (in OAuth2 the proper name for user is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the user's user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the user has not authenticated and includes a reason why the authentication was be denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @summary Reject a login request
     * @param challenge 
     * @param body 
     */
    public rejectLoginRequest (challenge: string, body?: RejectRequest) : Promise<{ response: http.ClientResponse; body: CompletedRequest;  }> {
        const localVarPath = this.basePath + '/oauth2/auth/requests/login/{challenge}/reject'
            .replace('{' + 'challenge' + '}', encodeURIComponent(String(challenge)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'challenge' is not null or undefined
        if (challenge === null || challenge === undefined) {
            throw new Error('Required parameter challenge was null or undefined when calling rejectLoginRequest.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "RejectRequest")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: CompletedRequest;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "CompletedRequest");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This endpoint revokes a user's granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens.
     * @summary Revokes all previous consent sessions of a user
     * @param user 
     */
    public revokeAllUserConsentSessions (user: string) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/oauth2/auth/sessions/consent/{user}'
            .replace('{' + 'user' + '}', encodeURIComponent(String(user)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'user' is not null or undefined
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling revokeAllUserConsentSessions.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This endpoint invalidates a user's authentication session. After revoking the authentication session, the user has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens.
     * @summary Invalidates a user's authentication session
     * @param user 
     */
    public revokeAuthenticationSession (user: string) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/oauth2/auth/sessions/login/{user}'
            .replace('{' + 'user' + '}', encodeURIComponent(String(user)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'user' is not null or undefined
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling revokeAuthenticationSession.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it.
     * @summary Revoke OAuth2 tokens
     * @param token 
     */
    public revokeOAuth2Token (token: string) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/oauth2/revoke';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling revokeOAuth2Token.');
        }


        let localVarUseFormData = false;

        if (token !== undefined) {
            localVarFormParams['token'] = ObjectSerializer.serialize(token, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.basic.applyToRequest(localVarRequestOptions);

        this.authentications.oauth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This endpoint revokes a user's granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
     * @summary Revokes consent sessions of a user for a specific OAuth 2.0 Client
     * @param user 
     * @param client 
     */
    public revokeUserClientConsentSessions (user: string, client: string) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/oauth2/auth/sessions/consent/{user}/{client}'
            .replace('{' + 'user' + '}', encodeURIComponent(String(user)))
            .replace('{' + 'client' + '}', encodeURIComponent(String(client)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'user' is not null or undefined
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling revokeUserClientConsentSessions.');
        }

        // verify required parameter 'client' is not null or undefined
        if (client === null || client === undefined) {
            throw new Error('Required parameter client was null or undefined when calling revokeUserClientConsentSessions.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This endpoint deletes ths user's login session cookie and redirects the browser to the url listed in `LOGOUT_REDIRECT_URL` environment variable. This endpoint does not work as an API but has to be called from the user's browser.
     * @summary Logs user out by deleting the session cookie
     */
    public revokeUserLoginCookie () : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/oauth2/auth/sessions/login/revoke';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Update an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.
     * @summary Update an OAuth 2.0 Client
     * @param id 
     * @param body 
     */
    public updateOAuth2Client (id: string, body: OAuth2Client) : Promise<{ response: http.ClientResponse; body: OAuth2Client;  }> {
        const localVarPath = this.basePath + '/clients/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateOAuth2Client.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateOAuth2Client.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "OAuth2Client")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: OAuth2Client;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "OAuth2Client");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This endpoint returns the payload of the ID Token, including the idTokenExtra values, of the provided OAuth 2.0 access token. The endpoint implements http://openid.net/specs/openid-connect-core-1_0.html#UserInfo .
     * @summary OpenID Connect Userinfo
     */
    public userinfo () : Promise<{ response: http.ClientResponse; body: UserinfoResponse;  }> {
        const localVarPath = this.basePath + '/userinfo';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.oauth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: UserinfoResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "UserinfoResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns metadata for discovering important JSON Web Keys. Currently, this endpoint returns the public key for verifying OpenID Connect ID Tokens.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Get Well-Known JSON Web Keys
     */
    public wellKnown () : Promise<{ response: http.ClientResponse; body: JsonWebKeySet;  }> {
        const localVarPath = this.basePath + '/.well-known/jwks.json';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: JsonWebKeySet;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "JsonWebKeySet");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum VersionApiApiKeys {
}

export class VersionApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'basic': new HttpBasicAuth(),
        'oauth2': new OAuth(),
    }

    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            this.username = basePathOrUsername;
            this.password = password
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: VersionApiApiKeys, value: string) {
        (this.authentications as any)[VersionApiApiKeys[key]].apiKey = value;
    }
    set username(username: string) {
        this.authentications.basic.username = username;
    }

    set password(password: string) {
        this.authentications.basic.password = password;
    }

    set accessToken(token: string) {
        this.authentications.oauth2.accessToken = token;
    }
    /**
     * This endpoint returns the version as `{ \"version\": \"VERSION\" }`. The version is only correct with the prebuilt binary and not custom builds.
     * @summary Get the version of Hydra
     */
    public getVersion () : Promise<{ response: http.ClientResponse; body: Version;  }> {
        const localVarPath = this.basePath + '/version';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Version;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Version");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
